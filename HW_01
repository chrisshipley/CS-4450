Standard ML of New Jersey v110.80 [built: Thu Aug 18 15:00:00 2016]
- - 1 + 2 * 3;
stdIn:1.2 Error: expression or pattern begins with infix identifier "-"
stdIn:1.2-1.13 Error: operator and operand don't agree [overload conflict]
  operator domain: [- ty] * [- ty]
  operand:         [int ty]
  in expression:
    - 1
- 1 + 2 * 3;
val it = 7 : int
- 1 + 2 * 3
= ;
val it = 7 : int
- 1234;
val it = 1234 : int
- 123.4;
val it = 123.4 : real
- true;
val it = true : bool
- false;
val it = false : bool
- "fred";
val it = "fred" : string
- "H";
val it = "H" : string
- #"H";
val it = #"H" : char
- ~1 + 2 - 3 * 4 div 5 mod 6;
val it = ~1 : int
- ~ 1 + 2 - 3 * 4 div 5 mod 6;
val it = ~1 : int
- !1.0 + 2.0 - 3.0 * 4.0 / 5.0;
stdIn:13.1-13.29 Error: operator and operand don't agree [tycon mismatch]
  operator domain: 'Z ref
  operand:         real
  in expression:
    ! 1.0
- ~1.0 + 2.0 - 3.0 * 4.0 / 5.0;
val it = ~1.4 : real
- "bibity" ^ "bobity" ^ "boo";
val it = "bibitybobityboo" : string
- 2 < 3
= ;
val it = true : bool
- 1.0 <= 1.0;
val it = true : bool
- #"d" > #"c";
val it = true : bool
- "abce" >= "abd";
val it = false : bool
- 1 < 2 orelse 3 > 4;
val it = true : bool
- 1 < 2 andalso not (3 < 4);
val it = false : bool
- true orelse 1 div 0 = 0;
val it = true : bool
- if 1 < 2 then #"x" else #"y";
val it = #"x" : char
- if 1 > 2 then 34 else 56;
val it = 56 : int
- (if 1 < 2 then 34 else 56) + 1;
val it = 35 : int
- 1 * 2;
val it = 2 : int
- 1.0 * 2.0;
val it = 2.0 : real
- 1.0 * 2;
stdIn:28.1-28.8 Error: operator and operand don't agree [overload conflict]
  operator domain: real * real
  operand:         real * [int ty]
  in expression:
    1.0 * 2
- 1 * 2.0;
stdIn:1.2-1.9 Error: operator and operand don't agree [overload conflict]
  operator domain: [* ty] * [* ty]
  operand:         [* ty] * real
  in expression:
    1 * 2.0
- real(123);
val it = 123.0 : real
- floor(3.6);
val it = 3 : int
- floor 3.6;
val it = 3 : int
- str #"a";
val it = "a" : string
- val x = 1 + 2 * 3;
val x = 7 : int
- x
= ;
val it = 7 : int
- val y = if x = 7 then 1.0 else 2.0;
val y = 1.0 : real
- val fred = 23;
val fred = 23 : int
- fred;
val it = 23 : int
- val fred = true;
val fred = true : bool
- fred;
val it = true : bool
- val barney = (1 + 2, 3.0 * 4.0, "brown");
val barney = (3,12.0,"brown") : int * real * string
- val point1 = ("red", (300, 200));
val point1 = ("red",(300,200)) : string * (int * int)
- #2 barney;
val it = 12.0 : real
- #1 (#2 point1);
val it = 300 : int
- [1, 2, 3];
val it = [1,2,3] : int list
- [1.0, 2.0];
val it = [1.0,2.0] : real list
- [true];
val it = [true] : bool list
- [(1, 2), (1, 3)];
val it = [(1,2),(1,3)] : (int * int) list
- [[1, 2, 3], [1, 2]];
val it = [[1,2,3],[1,2]] : int list list
- val x = (1, 2, 3);
val x = (1,2,3) : int * int * int
- val y = [1, 2, 3];
val y = [1,2,3] : int list
- [];
val it = [] : 'a list
- nil;
val it = [] : 'a list
- null [];
val it = true : bool
- null [1, 2, 3];
val it = false : bool
- [1, 2, 3] @ [4, 5, 6];
val it = [1,2,3,4,5,6] : int list
- val x = #"c" :: [];
val x = [#"c"] : char list
- val y = #"b" :: x;
val y = [#"b",#"c"] : char list
- val z = #"a" :: y;
val z = [#"a",#"b",#"c"] : char list
- val z = 1 :: 2 :: 3 :: [];
val z = [1,2,3] : int list
- hd z;
val it = 1 : int
- tl z;
val it = [2,3] : int list
- tl(tl z);
val it = [3] : int list
- tl(tl(tl z));
val it = [] : int list
- explode "hello";
val it = [#"h",#"e",#"l",#"l",#"o"] : char list
- implode[#"h", #"i"];
val it = "hi" : string
- fun firstChar s = hd (explode s);
val firstChar = fn : string -> char
- firstChar "abc";
val it = #"a" : char
- fun quot(a, b) = a div b;
val quot = fn : int * int -> int
- quot (6,2);
val it = 3 : int
- val pair = (6, 2);
val pair = (6,2) : int * int
- quot pair;
val it = 3 : int
- fun fact n =
=   if n = 0 then 1
=   else n * fact(n - 1);
val fact = fn : int -> int
- fact 5;
val it = 120 : int
- fun listum x =
=   if null x then 0
=   else hd x + listsum(tl x);
stdIn:78.15-78.22 Error: unbound variable or constructor: listsum
- listsum [1, 2, 3, 4, 5];
stdIn:1.2-1.9 Error: unbound variable or constructor: listsum
- listum [1, 2, 3, 4, 5];
stdIn:1.2-1.8 Error: unbound variable or constructor: listum
- fun listsum x =
=   if null x then 0
=   else n * fact(n - 1);
stdIn:80.17 Error: unbound variable or constructor: n
stdIn:80.8 Error: unbound variable or constructor: n
- fun listsum x =
=   if null x then 0
=   else hd x + listsum(tl x);
val listsum = fn : int list -> int
- listsum[1, 2, 3, 4, 5];
val it = 15 : int
-
- fun length x =
=   if null x then 0
=   else 1 + length (tl x);
val length = fn : 'a list -> int
- length [true, false, true];
val it = 3 : int
- -length [4.0, 3.0, 2.0, 1.0];
stdIn:89.1 Error: expression or pattern begins with infix identifier "-"
stdIn:89.1-89.29 Error: operator and operand don't agree [tycon mismatch]
  operator domain: [- ty] * [- ty]
  operand:         'Z list -> int
  in expression:
    - length
- length [4.0, 3.0, 2.0, 1.0];
val it = 4 : int
-
- fun badlength x =
=   if x = [] then 0
=   else 1 + badlength (tl x);
stdIn:92.8 Warning: calling polyEqual
val badlength = fn : ''a list -> int
- badlength [true, false, true];
val it = 3 : int
- badlength[4.0, 3.0, 2.0, 1.0];
stdIn:95.1-95.30 Error: operator and operand don't agree [equality type required]
  operator domain: ''Z list
  operand:         real list
  in expression:
    badlength (4.0 :: 3.0 :: 2.0 :: <exp> :: <exp>)
- fun reverse L =
=   if null L then nil
=   else reverse (tl L) @ [hd L];
val reverse = fn : 'a list -> 'a list
- reverse [1, 2, 3];
val it = [3,2,1] : int list
- fun prod(a, b) = a * b;
val prod = fn : int * int -> int
- fun prod(a:real, b:real) : real = a * b;
val prod = fn : real * real -> real